import {
  __commonJS,
  init_buffer,
  init_virtual_process_polyfill
} from "./chunk-MX5QOG3T.js";

// node_modules/url-params-parser/url_parser.js
var require_url_parser = __commonJS({
  "node_modules/url-params-parser/url_parser.js"(exports, module) {
    init_virtual_process_polyfill();
    init_buffer();
    var UrlParser = (urlString, namedUrl = "") => {
      const urlBase = new URL(urlString);
      function hash() {
        return urlBase.hash;
      }
      function host() {
        return urlBase.host;
      }
      function hostname() {
        return urlBase.hostname;
      }
      function namedParams() {
        const allPathName = pathNames();
        const allNamedParamsKeys = namedParamsWithIndex();
        return allNamedParamsKeys.reduce((values, paramKey) => {
          values[paramKey.value] = allPathName[paramKey.index];
          return values;
        }, {});
      }
      function namedParamsKeys() {
        const allNamedParamsKeys = namedParamsWithIndex(namedUrl);
        return allNamedParamsKeys.reduce((values, paramKey) => {
          values.push(paramKey.value);
          return values;
        }, []);
      }
      function namedParamsValues() {
        const allPathName = pathNames();
        const allNamedParamsKeys = namedParamsWithIndex();
        return allNamedParamsKeys.reduce((values, paramKey) => {
          values.push(allPathName[paramKey.index]);
          return values;
        }, []);
      }
      function namedParamsWithIndex() {
        const namedUrlParams = getPathNames(namedUrl);
        return namedUrlParams.reduce((validParams, param, index) => {
          if (param[0] === ":") {
            validParams.push({ value: param.slice(1), index });
          }
          return validParams;
        }, []);
      }
      function port() {
        return urlBase.port;
      }
      function pathname() {
        return urlBase.pathname;
      }
      function protocol() {
        return urlBase.protocol;
      }
      function search() {
        return urlBase.search;
      }
      function queryParams() {
        const params = {};
        urlBase.searchParams.forEach((value, key) => {
          params[key] = value;
        });
        return params;
      }
      function queryParamsKeys() {
        const params = [];
        urlBase.searchParams.forEach((_value, key) => {
          params.push(key);
        });
        return params;
      }
      function queryParamsValues() {
        const params = [];
        urlBase.searchParams.forEach((value) => {
          params.push(value);
        });
        return params;
      }
      function pathNames() {
        return getPathNames(urlBase.pathname);
      }
      function getPathNames(pathName) {
        if (pathName === "/" || pathName.trim().length === 0)
          return [pathName];
        if (pathName.slice(-1) === "/") {
          pathName = pathName.slice(0, -1);
        }
        if (pathName[0] === "/") {
          pathName = pathName.slice(1);
        }
        return pathName.split("/");
      }
      return Object.freeze({
        hash: hash(),
        host: host(),
        hostname: hostname(),
        namedParams: namedParams(),
        namedParamsKeys: namedParamsKeys(),
        namedParamsValues: namedParamsValues(),
        pathNames: pathNames(),
        port: port(),
        pathname: pathname(),
        protocol: protocol(),
        search: search(),
        queryParams: queryParams(),
        queryParamsKeys: queryParamsKeys(),
        queryParamsValues: queryParamsValues()
      });
    };
    module.exports = { UrlParser };
  }
});

// node_modules/url-params-parser/index.js
var require_url_params_parser = __commonJS({
  "node_modules/url-params-parser/index.js"(exports, module) {
    init_virtual_process_polyfill();
    init_buffer();
    var UrlParser = require_url_parser().UrlParser;
    module.exports = {
      UrlParser
    };
  }
});

// dep:svelte-router-spa__url-params-parser
init_virtual_process_polyfill();
init_buffer();
var svelte_router_spa_url_params_parser_default = require_url_params_parser();
export {
  svelte_router_spa_url_params_parser_default as default
};
//# sourceMappingURL=svelte-router-spa__url-params-parser.js.map
