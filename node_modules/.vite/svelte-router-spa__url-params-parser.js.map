{
  "version": 3,
  "sources": ["../url-params-parser/url_parser.js", "../url-params-parser/index.js", "dep:svelte-router-spa__url-params-parser"],
  "sourcesContent": ["const UrlParser = (urlString, namedUrl = \"\") => {\n  const urlBase = new URL(urlString);\n\n  /**\n   * Wrapper for URL.hash\n   *\n   **/\n  function hash() {\n    return urlBase.hash;\n  }\n\n  /**\n   * Wrapper for URL.host\n   *\n   **/\n  function host() {\n    return urlBase.host;\n  }\n\n  /**\n   * Wrapper for URL.hostname\n   *\n   **/\n  function hostname() {\n    return urlBase.hostname;\n  }\n\n  /**\n   * Returns an object with all the named params and their values\n   *\n   **/\n  function namedParams() {\n    const allPathName = pathNames();\n    const allNamedParamsKeys = namedParamsWithIndex();\n\n    return allNamedParamsKeys.reduce((values, paramKey) => {\n      values[paramKey.value] = allPathName[paramKey.index];\n      return values;\n    }, {});\n  }\n\n  /**\n   * Returns an array with all the named param keys\n   *\n   **/\n  function namedParamsKeys() {\n    const allNamedParamsKeys = namedParamsWithIndex(namedUrl);\n\n    return allNamedParamsKeys.reduce((values, paramKey) => {\n      values.push(paramKey.value);\n      return values;\n    }, []);\n  }\n\n  /**\n   * Returns an array with all the named param values\n   *\n   **/\n  function namedParamsValues() {\n    const allPathName = pathNames();\n    const allNamedParamsKeys = namedParamsWithIndex();\n\n    return allNamedParamsKeys.reduce((values, paramKey) => {\n      values.push(allPathName[paramKey.index]);\n      return values;\n    }, []);\n  }\n\n  /**\n   * Returns an array with all named param ids and their position in the path\n   * Private\n   **/\n  function namedParamsWithIndex() {\n    const namedUrlParams = getPathNames(namedUrl);\n\n    return namedUrlParams.reduce((validParams, param, index) => {\n      if (param[0] === \":\") {\n        validParams.push({ value: param.slice(1), index });\n      }\n      return validParams;\n    }, []);\n  }\n\n  /**\n   * Wrapper for URL.port\n   *\n   **/\n  function port() {\n    return urlBase.port;\n  }\n\n  /**\n   * Wrapper for URL.pathname\n   *\n   **/\n  function pathname() {\n    return urlBase.pathname;\n  }\n\n  /**\n   * Wrapper for URL.protocol\n   *\n   **/\n  function protocol() {\n    return urlBase.protocol;\n  }\n\n  /**\n   * Wrapper for URL.search\n   *\n   **/\n  function search() {\n    return urlBase.search;\n  }\n\n  /**\n   * Returns an object with all query params and their values\n   *\n   **/\n  function queryParams() {\n    const params = {};\n    urlBase.searchParams.forEach((value, key) => {\n      params[key] = value;\n    });\n\n    return params;\n  }\n\n  /**\n   * Returns an array with all the query param keys\n   *\n   **/\n  function queryParamsKeys() {\n    const params = [];\n    urlBase.searchParams.forEach((_value, key) => {\n      params.push(key);\n    });\n\n    return params;\n  }\n\n  /**\n   * Returns an array with all the query param values\n   *\n   **/\n  function queryParamsValues() {\n    const params = [];\n    urlBase.searchParams.forEach((value) => {\n      params.push(value);\n    });\n\n    return params;\n  }\n\n  /**\n   * Returns an array with all the elements of a pathname\n   *\n   **/\n  function pathNames() {\n    return getPathNames(urlBase.pathname);\n  }\n\n  /**\n   * Returns an array with all the parts of a pathname\n   * Private method\n   **/\n  function getPathNames(pathName) {\n    if (pathName === \"/\" || pathName.trim().length === 0) return [pathName];\n    if (pathName.slice(-1) === \"/\") {\n      pathName = pathName.slice(0, -1);\n    }\n    if (pathName[0] === \"/\") {\n      pathName = pathName.slice(1);\n    }\n\n    return pathName.split(\"/\");\n  }\n\n  return Object.freeze({\n    hash: hash(),\n    host: host(),\n    hostname: hostname(),\n    namedParams: namedParams(),\n    namedParamsKeys: namedParamsKeys(),\n    namedParamsValues: namedParamsValues(),\n    pathNames: pathNames(),\n    port: port(),\n    pathname: pathname(),\n    protocol: protocol(),\n    search: search(),\n    queryParams: queryParams(),\n    queryParamsKeys: queryParamsKeys(),\n    queryParamsValues: queryParamsValues(),\n  });\n};\n\nmodule.exports = { UrlParser };\n", "const UrlParser = require(\"./url_parser\").UrlParser;\n\nmodule.exports = {\n  UrlParser\n};\n", "export default require(\"./node_modules/url-params-parser/index.js\");"],
  "mappings": ";;;;;;;AAAA;AAAA;AAAA;AAAA;AAAA,QAAM,YAAY,CAAC,WAAW,WAAW,OAAO;AAC9C,YAAM,UAAU,IAAI,IAAI;AAMxB,sBAAgB;AACd,eAAO,QAAQ;AAAA;AAOjB,sBAAgB;AACd,eAAO,QAAQ;AAAA;AAOjB,0BAAoB;AAClB,eAAO,QAAQ;AAAA;AAOjB,6BAAuB;AACrB,cAAM,cAAc;AACpB,cAAM,qBAAqB;AAE3B,eAAO,mBAAmB,OAAO,CAAC,QAAQ,aAAa;AACrD,iBAAO,SAAS,SAAS,YAAY,SAAS;AAC9C,iBAAO;AAAA,WACN;AAAA;AAOL,iCAA2B;AACzB,cAAM,qBAAqB,qBAAqB;AAEhD,eAAO,mBAAmB,OAAO,CAAC,QAAQ,aAAa;AACrD,iBAAO,KAAK,SAAS;AACrB,iBAAO;AAAA,WACN;AAAA;AAOL,mCAA6B;AAC3B,cAAM,cAAc;AACpB,cAAM,qBAAqB;AAE3B,eAAO,mBAAmB,OAAO,CAAC,QAAQ,aAAa;AACrD,iBAAO,KAAK,YAAY,SAAS;AACjC,iBAAO;AAAA,WACN;AAAA;AAOL,sCAAgC;AAC9B,cAAM,iBAAiB,aAAa;AAEpC,eAAO,eAAe,OAAO,CAAC,aAAa,OAAO,UAAU;AAC1D,cAAI,MAAM,OAAO,KAAK;AACpB,wBAAY,KAAK,EAAE,OAAO,MAAM,MAAM,IAAI;AAAA;AAE5C,iBAAO;AAAA,WACN;AAAA;AAOL,sBAAgB;AACd,eAAO,QAAQ;AAAA;AAOjB,0BAAoB;AAClB,eAAO,QAAQ;AAAA;AAOjB,0BAAoB;AAClB,eAAO,QAAQ;AAAA;AAOjB,wBAAkB;AAChB,eAAO,QAAQ;AAAA;AAOjB,6BAAuB;AACrB,cAAM,SAAS;AACf,gBAAQ,aAAa,QAAQ,CAAC,OAAO,QAAQ;AAC3C,iBAAO,OAAO;AAAA;AAGhB,eAAO;AAAA;AAOT,iCAA2B;AACzB,cAAM,SAAS;AACf,gBAAQ,aAAa,QAAQ,CAAC,QAAQ,QAAQ;AAC5C,iBAAO,KAAK;AAAA;AAGd,eAAO;AAAA;AAOT,mCAA6B;AAC3B,cAAM,SAAS;AACf,gBAAQ,aAAa,QAAQ,CAAC,UAAU;AACtC,iBAAO,KAAK;AAAA;AAGd,eAAO;AAAA;AAOT,2BAAqB;AACnB,eAAO,aAAa,QAAQ;AAAA;AAO9B,4BAAsB,UAAU;AAC9B,YAAI,aAAa,OAAO,SAAS,OAAO,WAAW;AAAG,iBAAO,CAAC;AAC9D,YAAI,SAAS,MAAM,QAAQ,KAAK;AAC9B,qBAAW,SAAS,MAAM,GAAG;AAAA;AAE/B,YAAI,SAAS,OAAO,KAAK;AACvB,qBAAW,SAAS,MAAM;AAAA;AAG5B,eAAO,SAAS,MAAM;AAAA;AAGxB,aAAO,OAAO,OAAO;AAAA,QACnB,MAAM;AAAA,QACN,MAAM;AAAA,QACN,UAAU;AAAA,QACV,aAAa;AAAA,QACb,iBAAiB;AAAA,QACjB,mBAAmB;AAAA,QACnB,WAAW;AAAA,QACX,MAAM;AAAA,QACN,UAAU;AAAA,QACV,UAAU;AAAA,QACV,QAAQ;AAAA,QACR,aAAa;AAAA,QACb,iBAAiB;AAAA,QACjB,mBAAmB;AAAA;AAAA;AAIvB,WAAO,UAAU,EAAE;AAAA;AAAA;;;ACpMnB;AAAA;AAAA;AAAA;AAAA,QAAM,YAAY,qBAAwB;AAE1C,WAAO,UAAU;AAAA,MACf;AAAA;AAAA;AAAA;;;ACHF;AAAA;AAAA,IAAO,8CAAQ;",
  "names": []
}
